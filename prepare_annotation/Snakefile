configfile: "config.yaml"

localrules: download_genome, assemble_genome, download_annotation, assemble_annotation, finish

#################################################################################
### Final rule
#################################################################################

rule finish:
	input:
		STAR_index = os.path.join(config["output_dir"], "STAR_index"),
		other_RNA_idx = os.path.join(config["output_dir"], "other_RNAs_sequence.idx"),
		salmon_index = os.path.join(config["output_dir"], "filtered_transcripts_salmon.idx")

#################################################################################
### Download genome
#################################################################################

rule download_genome:
	params:
		sequences = expand(config["genome"]),
	output:
		genome_dir = os.path.join(config["output_dir"], "genome")
	singularity:
		"docker://zavolab/ubuntu:18.04"
	log:
		os.path.join(config["local_log"], "download_genome.log")
	shell:
		"(wget --directory-prefix {output.genome_dir} {params.sequences}) &> {log}"

#################################################################################
### Assemble genome
#################################################################################

rule assemble_genome:
	input:
		genome_dir = os.path.join(config["output_dir"], "genome")
	output:
		genome = os.path.join(config["output_dir"], "genome.fa")
	params:
		genome = os.path.join(config["output_dir"], "genome.fa.gz")
	singularity:
		"docker://zavolab/ubuntu:18.04"
	log:
		os.path.join(config["local_log"], "assemble_genome.log")
	shell:
		"(cat {input.genome_dir}/* > {params.genome}; \
		zcat {params.genome} | sed \'s/\s.*//\' > {output.genome}; \
		rm {params.genome}; \
		) &>{log}"

#################################################################################
### Download annotation
#################################################################################

rule download_annotation:
	params:
		annotation = expand(config["annotation"]),
	output:
		annotation_dir = os.path.join(config["output_dir"], "annotation")
	singularity:
		"docker://zavolab/ubuntu:18.04"
	log:
		os.path.join(config["local_log"], "download_annotation.log")
	shell:
		"(wget --directory-prefix {output.annotation_dir} {params.annotation}) &> {log}"

#################################################################################
### Assemble annotation
#################################################################################

rule assemble_annotation:
	input:
		annotation_dir = os.path.join(config["output_dir"], "annotation")
	output:
		annotation = os.path.join(config["output_dir"], "annotation.gtf")
	params:
		annotation = os.path.join(config["output_dir"], "annotation.gtf.gz")
	singularity:
		"docker://zavolab/ubuntu:18.04"
	log:
		os.path.join(config["local_log"], "assemble_annotation.log")
	shell:
		"(cat {input.annotation_dir}/* > {params.annotation}; \
		zcat {params.annotation} > {output.annotation}; \
		rm {params.annotation}; \
		) &>{log}"

#################################################################################
### ToDo: Download other RNA
#################################################################################

#################################################################################
### Generate segemehl index for other RNAs
#################################################################################

rule generate_segemehl_index_other_RNAs:
	input:
		sequence = config["other_RNA"]
	output:
		other_RNA_idx = os.path.join(config["output_dir"], "other_RNAs_sequence.idx")
	log:
		os.path.join(config["local_log"], "generate_segemehl_index_other_RNAs.log")
	singularity:
		"docker://zavolab/segemehl:0.2.0"
	shell:
		"(segemehl.x -x {output.other_RNA_idx} -d {input.sequence}) &> {log}"

#################################################################################
### Index genome STAR
#################################################################################



##################################################################################
### Filter protein coding and lncRNA transcripts
##################################################################################

rule filter_transcripts:
	input:
		script = "scripts/fg_extract_transcripts.py",
		annotation = os.path.join(config["output_dir"], "annotation.gtf")
	output:
		annotation = os.path.join(config["output_dir"], "filtered_transcripts.gtf")
	params:
		transcript_biotype = "\"protein_coding,lincRNA,antisense_RNA,retained_intron,sense_intronic\""
	singularity:
		"docker://zavolab/python_htseq:3.6.5_0.10.0"
	log:
		os.path.join(config["local_log"], "filter_transcripts.log")
	shell:		
		"(python {input.script} \
		--gtf {input.annotation} \
		--out {output.annotation} \
		--transcript_biotype {params.transcript_biotype}) &> {log}"

##################################################################################
### Extract transcript sequences
##################################################################################

rule extract_sequences:
	input:
		annotation = os.path.join(config["output_dir"], "filtered_transcripts.gtf"),
		genome = os.path.join(config["output_dir"], "genome.fa")
	output:
		transcripts = os.path.join(config["output_dir"], "filtered_transcripts.fa")
	singularity:
		"docker://zavolab/cufflinks:2.2.1"
	log:
		os.path.join(config["local_log"],"extract_sequences.log")
	shell:
		"(gffread {input.annotation} \
		-g {input.genome} \
		-w {output.transcripts}) &> {log}"

##################################################################################
### Index salmon
##################################################################################

rule index_salmon:
	input:
		transcripts = os.path.join(config["output_dir"], "filtered_transcripts.fa")
	output:
		index = os.path.join(config["output_dir"], "filtered_transcripts_salmon.idx")
	params:
		kmerLen = config["kmerLen"],
	singularity:
		"docker://zavolab/salmon:0.11.0"
	log:
		os.path.join(config["local_log"],"index_salmon.log")
	threads:	8
	shell:
		"(salmon index \
		--transcripts {input.transcripts} \
		--index {output.index} \
		--kmerLen {params.kmerLen} \
		--threads {threads}) &> {log}"
